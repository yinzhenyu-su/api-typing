import{_ as s,o as a,c as l,ae as t}from"./chunks/framework.nQCaO3ND.js";const c=JSON.parse('{"title":"简介","description":"","frontmatter":{},"headers":[],"relativePath":"start/introduction.md","filePath":"start/introduction.md"}'),n={name:"start/introduction.md"};function p(e,i,h,r,k,o){return a(),l("div",null,i[0]||(i[0]=[t(`<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h1><h2 id="什么是-api-typing" tabindex="-1">什么是 Api-Typing？ <a class="header-anchor" href="#什么是-api-typing" aria-label="Permalink to &quot;什么是 Api-Typing？&quot;">​</a></h2><p>Api-Typing 是一个基于 axios 的类型安全的 HTTP 请求框架，专注于提供完整的 TypeScript 类型支持。它能够自动从 OpenAPI 规范中生成类型定义，为接口调用提供端到端的类型安全保障，包括：</p><ul><li>URL 路径参数的类型检查</li><li>请求参数（Query Parameters）的类型提示</li><li>请求体（Request Body）的类型校验</li><li>响应数据（Response）的类型推导</li></ul><h2 id="为什么选择-api-typing" tabindex="-1">为什么选择 Api-Typing？ <a class="header-anchor" href="#为什么选择-api-typing" aria-label="Permalink to &quot;为什么选择 Api-Typing？&quot;">​</a></h2><p>在前端开发中，API 接口对接是一个既重要又容易出错的环节。常见的问题包括：</p><ul><li>接口 URL 拼写错误</li><li>请求参数类型不匹配</li><li>响应数据结构理解偏差</li><li>后端接口变更未能及时同步</li><li>缺乏类型提示导致的开发效率低下</li></ul><p>Api-Typing 正是为解决这些问题而生。如果你的项目已经有了 Swagger/OpenAPI 文档，Api-Typing 可以：</p><ol><li>自动生成完整的 TypeScript 类型定义</li><li>在开发时提供实时的类型检查和提示</li><li>在编译阶段发现潜在的类型错误</li><li>减少运行时错误，提高代码质量</li></ol><h2 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h2><ul><li>🔒 完整的类型安全：URL、请求参数、响应数据的端到端类型保护</li><li>🔄 与 axios 高度兼容：复用你现有的 axios 配置和拦截器</li><li>🚀 开发体验优先：智能的 IDE 提示和自动补全</li><li>📚 基于 OpenAPI：支持从 Swagger/OpenAPI 规范自动生成类型</li><li>🛠 灵活的配置：支持自定义序列化、Mock 数据等高级特性</li></ul><h2 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createHTTPClient } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;api-typing&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建类型安全的 HTTP 客户端</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createHTTPClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获得完整的类型提示和检查</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users/{userId}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  params: { userId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  query: { include: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;posts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="设计理念" tabindex="-1">设计理念 <a class="header-anchor" href="#设计理念" aria-label="Permalink to &quot;设计理念&quot;">​</a></h2><p>Api-Typing 的核心理念是&quot;让接口调用更安全、更高效&quot;。通过将 OpenAPI 规范与 TypeScript 的类型系统紧密结合，我们实现了：</p><ul><li>开发时的即时反馈</li><li>编译时的类型检查</li></ul><p>这种多层次的保护机制能够显著提升开发效率和代码质量。</p>`,17)]))}const g=s(n,[["render",p]]);export{c as __pageData,g as default};
