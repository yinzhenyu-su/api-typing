import{_ as i,c as a,o as n,a2 as s}from"./chunks/framework.C94oF1kp.js";const y=JSON.parse('{"title":"ApiTypingInstance","description":"","frontmatter":{},"headers":[],"relativePath":"basic/api-typing-instance.md","filePath":"basic/api-typing-instance.md"}'),t={name:"basic/api-typing-instance.md"},e=s(`<h1 id="apitypinginstance" tabindex="-1">ApiTypingInstance <a class="header-anchor" href="#apitypinginstance" aria-label="Permalink to &quot;ApiTypingInstance&quot;">​</a></h1><h2 id="创建-apitypinginstance" tabindex="-1">创建 ApiTypingInstance <a class="header-anchor" href="#创建-apitypinginstance" aria-label="Permalink to &quot;创建 ApiTypingInstance&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createHTTPClient } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;api-typing&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用createHTTPClient接口会创建ApiTypingInstance</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ApiTypingInstance 可以用来发送请求，设置当前请求参数等</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createHTTPClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="apitypinginstance-的属性和方法" tabindex="-1">ApiTypingInstance 的属性和方法 <a class="header-anchor" href="#apitypinginstance-的属性和方法" aria-label="Permalink to &quot;ApiTypingInstance 的属性和方法&quot;">​</a></h2><p>instance#get(url[, config])</p><p>instance#delete(url[, data[, config]])</p><p>instance#head(url[, config])</p><p>instance#options(url[, config])</p><p>instance#post(url[, data[, config]])</p><p>instance#put(url[, data[, config]])</p><p>instance#patch(url[, data[, config]])</p><p>instance#defaults</p><p>instance#interceptors</p><p>instance#cancelToken()</p><p>如果你用过 axios 就会发现这里的属性和方法与 axios 非常相似，实际上这就是继承自 AxiosInstance 的。</p>`,15),p=[e];function c(l,h,o,r,d,g){return n(),a("div",null,p)}const u=i(t,[["render",c]]);export{y as __pageData,u as default};
