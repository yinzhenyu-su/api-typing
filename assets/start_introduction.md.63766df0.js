import{_ as t,c as e,o as a,a as i}from"./app.f68c23f8.js";const u=JSON.parse('{"title":"简介","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是 Api-Typing？","slug":"什么是-api-typing","link":"#什么是-api-typing","children":[]},{"level":2,"title":"为什么会有这个项目？","slug":"为什么会有这个项目","link":"#为什么会有这个项目","children":[]},{"level":2,"title":"项目的目标是什么？","slug":"项目的目标是什么","link":"#项目的目标是什么","children":[]}],"relativePath":"start/introduction.md"}'),r={name:"start/introduction.md"},n=i('<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h1><h2 id="什么是-api-typing" tabindex="-1">什么是 Api-Typing？ <a class="header-anchor" href="#什么是-api-typing" aria-hidden="true">#</a></h2><p>Api-Typing 是一个基于 axios 的强类型提示的 http 框架，它提供了包括 url、接口入参、接口回参的类型提示支持。</p><h2 id="为什么会有这个项目" tabindex="-1">为什么会有这个项目？ <a class="header-anchor" href="#为什么会有这个项目" aria-hidden="true">#</a></h2><p>接口的对接在前端的工作中占据了很大一部分时间，我们在接口对接时经常会遇到以下这些情况：</p><ul><li>不小心写错了接口字段（ url 拼写错误，入参，回参错误）。</li><li>后端接口变更了（可能是 url，入参，或者回参），但是没有通知到前端。</li></ul><p>这些错误可能不会立即被暴露出来，直到测试时才会被发现，但是如果项目已经有了完善的 <strong>swagger</strong> 文档或者其他基于 <strong>openapi</strong> 协议的文档的话，那么就完全可以在编写接口的时候将这些错误排除掉。那么完成整个逻辑的链条就是 <strong>openapi</strong> &gt; <strong>typescript</strong> &gt; <strong>全自动的类型提示</strong>。</p><h2 id="项目的目标是什么" tabindex="-1">项目的目标是什么？ <a class="header-anchor" href="#项目的目标是什么" aria-hidden="true">#</a></h2><p>由于<strong>axios</strong>提供了很完善的底层功能，那么这个项目的目标就是尽量兼容<strong>axios</strong>的接口，并且在其基础上提供更完善的类型支持。所以如果你的项目对<strong>axios</strong>有封装的话，该项目会提供尽可能平滑的使用体验。</p>',9),s=[n];function o(p,l,d,c,h,g){return a(),e("div",null,s)}const f=t(r,[["render",o]]);export{u as __pageData,f as default};
