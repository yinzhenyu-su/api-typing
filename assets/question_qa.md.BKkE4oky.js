import{_ as i,o as a,c as n,ae as t}from"./chunks/framework.nQCaO3ND.js";const E=JSON.parse('{"title":"问题解答","description":"","frontmatter":{},"headers":[],"relativePath":"question/qa.md","filePath":"question/qa.md"}'),e={name:"question/qa.md"};function p(l,s,h,k,r,d){return a(),n("div",null,s[0]||(s[0]=[t(`<h1 id="问题解答" tabindex="-1">问题解答 <a class="header-anchor" href="#问题解答" aria-label="Permalink to &quot;问题解答&quot;">​</a></h1><h2 id="如何解决-query-参数对数组编码的问题" tabindex="-1">如何解决 query 参数对数组编码的问题？ <a class="header-anchor" href="#如何解决-query-参数对数组编码的问题" aria-label="Permalink to &quot;如何解决 query 参数对数组编码的问题？&quot;">​</a></h2><p>api-typing 在对 <code>query</code> 参数编码时使用了 <code>qs</code> 库，所以解决此问题的方式和<code>qs</code>库一致,在请求参数中添加 <code>stringifyOptions</code> 参数即可</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHTTPClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ query: { ids: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] } })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编码后的query</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;ids%5B0%5D=1&amp;ids%5B1%5D=2&amp;ids%5B2%5D=3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHTTPClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  query: { ids: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  stringifyOptions: { arrayFormat: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;comma&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, encode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未编码的query</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;ids=1,2,3&quot;</span></span></code></pre></div>`,4)]))}const c=i(e,[["render",p]]);export{E as __pageData,c as default};
